import { NextApiHandler, NextApiRequest, NextApiResponse } from 'next';
import { IAdapter, TMiddleware, IPaginationConfig, TModelsOptions, TSwaggerConfig, TDefaultExposeStrategy } from './types';
import { GetRouteType } from './utils';
type TCallback<T = undefined> = (req: NextApiRequest, res: NextApiResponse, options?: T) => void | Promise<void>;
type TErrorCallback = (req: NextApiRequest, res: NextApiResponse, error: Error) => void | Promise<void>;
interface INextCrudOptions<T, Q, M extends string = string> {
    adapter: IAdapter<T, Q, M>;
    formatResourceId?: (resourceId: string) => string | number;
    onRequest?: TCallback<GetRouteType & {
        resourceName: string;
    }>;
    onSuccess?: TCallback;
    onError?: TErrorCallback;
    middlewares?: TMiddleware<T>[];
    pagination?: IPaginationConfig;
    models?: TModelsOptions<M>;
    swagger?: TSwaggerConfig<M>;
    defaultExposeStrategy?: TDefaultExposeStrategy;
}
declare function NextCrud<T, Q, M extends string = string>({ adapter, models, formatResourceId, onRequest, onSuccess, onError, middlewares, pagination, swagger, defaultExposeStrategy, }: INextCrudOptions<T, Q, M>): Promise<NextApiHandler<T>>;
export default NextCrud;
