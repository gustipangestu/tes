"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-explicit-any */
// @ts-ignore
const client_1 = require("@prisma/client");
const pluralize_1 = __importDefault(require("pluralize"));
const httpError_1 = __importDefault(require("../../httpError"));
const parseCursor_1 = require("./utils/parseCursor");
const parseOrderBy_1 = require("./utils/parseOrderBy");
const parseRecursive_1 = require("./utils/parseRecursive");
const parseWhere_1 = require("./utils/parseWhere");
const jsonSchemaParser_1 = __importDefault(require("./jsonSchemaParser"));
const utils_1 = require("../../utils");
class PrismaAdapter {
    constructor({ primaryKey = 'id', prismaClient, manyRelations = {}, models, }) {
        this.getPrismaClientModels = () => {
            if (client_1.Prisma.dmmf) {
                // @ts-ignore
                this.dmmf = client_1.Prisma.dmmf;
                return client_1.Prisma.dmmf.datamodel.models.map((m) => m.name);
            }
            throw new Error("Couldn't get prisma client models, make sure you are using Prisma v5 or above.");
        };
        this.prismaClient = prismaClient;
        this.primaryKey = primaryKey;
        this.manyRelations = manyRelations;
        this._ctorModels = models;
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            const models = this._ctorModels;
            const prismaDmmfModels = this.getPrismaClientModels();
            if (typeof models !== 'undefined') {
                models.forEach((model) => {
                    if (!prismaDmmfModels.includes(model)) {
                        throw new Error(`Model name ${model} is invalid.`);
                    }
                });
            }
            this.models = models !== null && models !== void 0 ? models : prismaDmmfModels;
            this.prismaJsonSchemaParser = new jsonSchemaParser_1.default(this.prismaClient, this.dmmf);
        });
    }
    getPaginationData(resourceName, query) {
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-ignore
            const total = yield this.getPrismaDelegate(resourceName).count({
                where: query.where,
                distinct: query.distinct,
            });
            return {
                total,
                pageCount: Math.ceil(total / query.take),
                page: Math.ceil(query.skip / query.take) + 1,
            };
        });
    }
    handleError(err) {
        console.error(err.message);
        if (err instanceof client_1.Prisma.PrismaClientKnownRequestError ||
            err instanceof client_1.Prisma.PrismaClientValidationError) {
            throw new httpError_1.default(400, 'invalid request, check your server logs for more info');
        }
        else {
            throw new httpError_1.default(500, 'an unknown error occured, check your server logs for more info');
        }
    }
    parseQuery(resourceName, query) {
        var _a, _b, _c;
        const parsed = {};
        if (query.select) {
            parsed.select = (0, parseRecursive_1.parsePrismaRecursiveField)(query.select, 'select');
        }
        if (query.include) {
            parsed.include = (0, parseRecursive_1.parsePrismaRecursiveField)(query.include, 'include');
        }
        if ((_a = query.originalQuery) === null || _a === void 0 ? void 0 : _a.where) {
            parsed.where = (0, parseWhere_1.parsePrismaWhere)(JSON.parse(query.originalQuery.where), (_b = this.manyRelations[resourceName]) !== null && _b !== void 0 ? _b : []);
        }
        if (query.orderBy) {
            parsed.orderBy = (0, parseOrderBy_1.parsePrismaOrderBy)(query.orderBy);
        }
        if (typeof query.limit !== 'undefined') {
            parsed.take = query.limit;
        }
        if (typeof query.skip !== 'undefined') {
            parsed.skip = query.skip;
        }
        if ((_c = query.originalQuery) === null || _c === void 0 ? void 0 : _c.cursor) {
            parsed.cursor = (0, parseCursor_1.parsePrismaCursor)(JSON.parse(query.originalQuery.cursor));
        }
        if (query.distinct) {
            parsed.distinct = query.distinct;
        }
        return parsed;
    }
    getAll(resourceName, query) {
        return __awaiter(this, void 0, void 0, function* () {
            // @ts-ignore
            const results = yield this.getPrismaDelegate(resourceName).findMany({
                select: query.select,
                include: query.include,
                where: query.where,
                orderBy: query.orderBy,
                cursor: query.cursor,
                take: query.take,
                skip: query.skip,
                distinct: query.distinct,
            });
            return results;
        });
    }
    getOne(resourceName, resourceId, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const delegate = this.getPrismaDelegate(resourceName);
            const resource = yield delegate.findUnique({
                where: {
                    [this.primaryKey]: resourceId,
                },
                select: query.select,
                include: query.include,
            });
            return resource;
        });
    }
    create(resourceName, data, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const createdResource = yield this.getPrismaDelegate(resourceName).create({
                data,
                select: query.select,
                include: query.include,
            });
            return createdResource;
        });
    }
    update(resourceName, resourceId, data, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const updatedResource = yield this.getPrismaDelegate(resourceName).update({
                where: {
                    [this.primaryKey]: resourceId,
                },
                data,
                select: query.select,
                include: query.include,
            });
            return updatedResource;
        });
    }
    delete(resourceName, resourceId, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const deletedResource = yield this.getPrismaDelegate(resourceName).delete({
                where: {
                    [this.primaryKey]: resourceId,
                },
                select: query.select,
                include: query.include,
            });
            return deletedResource;
        });
    }
    connect() {
        return this.prismaClient.$connect();
    }
    disconnect() {
        return this.prismaClient.$disconnect();
    }
    get client() {
        return this.prismaClient;
    }
    getModels() {
        return this.models;
    }
    getModelsJsonSchema() {
        const definitions = this.prismaJsonSchemaParser.parseModels();
        const models = Object.keys(definitions);
        const inputs = this.prismaJsonSchemaParser.parseInputTypes(models);
        const schema = JSON.stringify(Object.assign(Object.assign(Object.assign(Object.assign({}, inputs), definitions), this.prismaJsonSchemaParser.getPaginationDataSchema()), this.prismaJsonSchemaParser.getPaginatedModelsSchemas(models)));
        const defs = schema.replace(/#\/definitions/g, '#/components/schemas');
        return JSON.parse(defs);
    }
    getPrismaDelegate(resourceName) {
        // @ts-ignore
        return this.prismaClient[`${resourceName.charAt(0).toLowerCase()}${resourceName.slice(1)}`];
    }
    mapModelsToRouteNames() {
        const models = this.getModels();
        const routesMap = {};
        for (const model of models) {
            if (this.dmmf.datamodel.models) {
                routesMap[model] = (0, utils_1.ensureCamelCase)((0, pluralize_1.default)(this.dmmf.datamodel.models.find((m) => m.name === model).name));
            }
        }
        return routesMap;
    }
}
exports.default = PrismaAdapter;
